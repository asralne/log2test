#!/usr/bin/env php
<?php
/*
 * This file is part of Log2Test Project.
 *
 * (c) Ousama Ben Younes <benyounes.ousama@gmail.com>
 *
 */

namespace Log2Test;

require_once('vendor/autoload.php');

use Symfony\Component\Console\Helper\ProgressBar;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\Formatter\OutputFormatter;


$output = new ConsoleOutput();
$output->setFormatter(new OutputFormatter(true));

// Parsing parameters
$options = getopt("m:");
$mode = (isset($options['m']) ? $options['m'] : '');

$configParser = new ConfigParser();
$logParser = LogParserFactory::create();

if ('generate' === $mode || '' === $mode) {
    $logFile = $configParser->getValueFromKey('logFile');
    $splFile = new \SplFileObject($logFile, 'r');
    $splFile->seek(PHP_INT_MAX);
    $nbLine = $splFile->key() + 1;
    $progress = new ProgressBar($output, $nbLine);
    $progress->setOverwrite(true);
    $progress->setFormat(' %current%/%max% [%bar%] %percent:3s%% %message%');
    $progress->setOverwrite(true);
    $progress->setMessage('Task starts');
    $progress->start();
    $nbFileGenerated = 0;
    $progress->setOverwrite(true);
    $progress->setProgress($logParser->getBeginLine());

    while (1) {
        $parseNextLine = $logParser->parse();
        $nbFileGenerated += $logParser->generateAllTests($progress);
        $logParser->saveTestConfiguration();
        $progress->advance($logParser->getNumberOfLine());
        if (false === $parseNextLine)
        {
            break;
        }
    }
    $progress->finish();
}

if ('execute' === $mode || '' === $mode) {
    $logParser->generatePhpunitTestSuiteLauncher();
    $logParser->execute();
}
